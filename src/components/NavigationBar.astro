---
import { ModeToggle } from "./ModeToggle";
import Button from "./global/Button";

const navItems = [
  { label: "Services", href: "#services" },
  { label: "About us", href: "#about" },
  { label: "Noticias", href: "#noticias" },
];
---

<header class="fixed top-0 w-full transition-all duration-300" id="navbar">
  <!-- Main navbar -->
  <nav class="p-4 flex items-center justify-between bg-white/80 dark:bg-black/80 backdrop-blur-sm relative z-30">
    <!-- Left section -->
    <div class="flex items-center gap-4">
      <button
        id="menuButton"
        class="text-primary dark:text-white font-size-base lg:hidden"
        aria-label="Menu"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <line x1="4" x2="20" y1="12" y2="12"></line>
          <line x1="4" x2="20" y1="6" y2="6"></line>
          <line x1="4" x2="20" y1="18" y2="18"></line>
        </svg>
      </button>
      <a href="/" class="text-primary dark:text-white font-size-base">Forjandi</a>
    </div>

    <!-- Central navigation - visible only on desktop -->
    <div class="hidden lg:flex items-center gap-8">
      {
        navItems.map((item) => (
          <a
            href={item.href}
            class="text-primary dark:text-white font-size-base hover:text-primary/80 dark:hover:text-white/80 transition-colors"
          >
            {item.label}
          </a>
        ))
      }
    </div>

    <!-- Right section -->
    <div class="flex items-center gap-4">
      <ModeToggle client:load />
      <div class="hidden lg:block">
        <Button client:load onClick={() => alert("Botón clickeado")}>
          Contáctanos
        </Button>
      </div>
    </div>
  </nav>

  <!-- Overlay with blur (moved inside the header, before the mobile menu) -->
  <div
    id="overlay"
    class="fixed inset-0 bg-black/30 backdrop-blur-sm opacity-0 pointer-events-none transition-opacity duration-300 z-40"
  >
  </div>

  <!-- Expandable mobile menu -->
  <div
    id="mobileMenu"
    class="fixed bottom-0 left-0 w-full bg-white dark:bg-black transform translate-y-full transition-transform duration-300 ease-in-out z-50"
  >
    <!-- Scroll indicator line -->
    <div class="w-full flex justify-center pt-2">
      <div class="w-10 h-1 bg-gray-300 dark:bg-gray-700 rounded-full mb-2 animate-pulse"></div>
    </div>

    <div class="p-4 flex flex-col gap-4 relative">
      <Button client:load onClick={() => alert("Botón clickeado")}>Contáctanos</Button>
      {
        navItems.map((item) => (
          <a
            href={item.href}
            class="text-primary dark:text-white font-size-base py-2"
          >
            {item.label}
          </a>
        ))
      }
    </div>
  </div>
</header>

<style>
  .font-size-base {
    font-size: 17px;
  }

  @media (min-width: 1024px) {
    .font-size-base {
      font-size: 20px;
    }
    #mobileMenu .animate-pulse {
      display: none;
    }
  }

  /* Pulse animation for the line */
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }
</style>

<script>
  const navbar = document.getElementById("navbar");
  const menuButton = document.getElementById("menuButton");
  const mobileMenu = document.getElementById("mobileMenu");
  const overlay = document.getElementById("overlay");
  let isMenuOpen = false;

  // Toggle the mobile menu
  menuButton?.addEventListener("click", () => {
    toggleMenu();
  });

  // Function to close the menu
  const closeMenu = () => {
    if (isMenuOpen) {
      isMenuOpen = false;
      mobileMenu?.classList.add("translate-y-full");
      overlay?.classList.add("opacity-0", "pointer-events-none");
    }
  };

  // Function to toggle the menu
  const toggleMenu = () => {
    isMenuOpen = !isMenuOpen;
    mobileMenu?.classList.toggle("translate-y-full", !isMenuOpen);
    
    if (isMenuOpen) {
      overlay?.classList.remove("opacity-0", "pointer-events-none");
    } else {
      overlay?.classList.add("opacity-0", "pointer-events-none");
    }
  };

  // Close menu when clicking on the overlay
  overlay?.addEventListener("click", closeMenu);

  // Close menu when scrolling
  document.addEventListener("scroll", closeMenu);

  // Scroll effect for the border
  let lastScroll = 0;
  window.addEventListener("scroll", () => {
    const currentScroll = window.pageYOffset;
    
    if (currentScroll > 0) {
      navbar?.classList.add("border-b", "border-gray-200", "dark:border-gray-800");
    } else {
      navbar?.classList.remove("border-b", "border-gray-200", "dark:border-gray-800");
    }
    
    lastScroll = currentScroll;
  });

  // Detect scroll in the mobile menu
  let touchStartY = 0;
  let touchEndY = 0;

  mobileMenu?.addEventListener('touchstart', (e) => {
    touchStartY = e.touches[0].clientY;
  });

  mobileMenu?.addEventListener('touchmove', (e) => {
    touchEndY = e.touches[0].clientY;
    
    // If the user scrolls down
    if (touchEndY < touchStartY && isMenuOpen) {
      closeMenu();
    }
  });

  // Function to smooth scroll
  const scrollToSection = (e: Event) => {
    const link = e.currentTarget as HTMLAnchorElement;
    const href = link.getAttribute('href');
    
    if (href?.startsWith('#')) {
      e.preventDefault();
      const targetId = href.replace('#', '');
      const element = document.getElementById(targetId);
      
      if (element) {
        closeMenu(); // Cerrar menú si está abierto
        element.scrollIntoView({ 
          behavior: 'smooth',
          block: 'start'
        });
      }
    }
  };

  // Add event listeners to all navigation links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', scrollToSection);
  });
</script>

